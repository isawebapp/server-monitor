name: Build and Release Agent Application

on:
  push:
    tags:
      - 'v*'  # Trigger when a new tag is pushed (for release)
  
  workflow_dispatch:  # Allow manual triggers from the GitHub UI

permissions:
  packages: write
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux]  # Target OS
        goarch: [amd64, arm64]  # Target architectures

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies and build the application
        run: |
          # Navigate to the agent directory
          cd agent
          
          # Initialize Go modules if needed
          go mod tidy
          
          # Build the Go application
          GOOS=linux GOARCH=amd64 go build -v -o agent-linux-amd64 ./agent.go
          GOOS=linux GOARCH=arm64 go build -v -o agent-linux-arm64 ./agent.go

      - name: Create a GitHub Release and Upload Binaries
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}   # Uses the tag that triggered the workflow (e.g., v1.0.0)
          files: |
            agent-linux-amd64
            agent-linux-arm64
          generate_release_notes: true   # Automatically generate release notes (optional)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Set GH_TOKEN environment variable for authentication

      - name: Upload install/uninstall scripts as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: install-uninstall-scripts
          path: ./agent/install.sh, ./agent/uninstall.sh, ./agent/update.sh
